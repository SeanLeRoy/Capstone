{"version":3,"sources":["components/Nav.jsx","components/Footer.jsx","components/CentralBlock.jsx","components/FeatureBlock.jsx","components/Profiles.jsx","components/Container.jsx","utils/serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","id","src","alt","class","Footer","href","target","rel","title","style","marginBottom","CentralBlock","height","FeatureBlock","es_Container","Row","Col","xs","Card","Img","Body","Title","Text","Profiles","Container","Fragment","components_Nav","components_CentralBlock","components_FeatureBlock","components_Profiles","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","components_Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LASeA,SAPH,kBACRC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACJH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,iBAAiBC,IAAI,gBAC9BL,EAAAC,EAAAC,cAAA,OAAKE,IAAI,oBAAoBC,IAAI,cAAcC,MAAM,cCO9CC,EAVA,kBACXP,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACJH,EAAAC,EAAAC,cAAA,KAAGM,KAAO,mCAAkCR,EAAAC,EAAAC,cAAA,OAAKE,IAAI,iBAAiBC,IAAI,eAE1EL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAR,gBACIH,EAAAC,EAAAC,cAAA,KAAGO,OAAO,SAASC,IAAI,sBAAsBF,KAAK,2BAA2BG,MAAM,WAAnF,aADJ,SACoHX,EAAAC,EAAAC,cAAA,KAAGO,OAAO,SAASC,IAAI,sBAAsBF,KAAK,4BAA4BG,MAAM,YAApF,oBADpH,mBACuPX,EAAAC,EAAAC,cAAA,KAAGO,OAAO,SAASC,IAAI,sBAAsBF,KAAK,8CAA8CG,MAAM,0BAA0BC,MAAO,CAAEC,aAAc,SAAvJ,iBCGhPC,EARM,kBACjBd,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAEJH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,mBAAmBC,IAAI,cAAcU,OAAO,4CCsB9CC,EAzBM,kBACjBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWd,GAAG,YACVH,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,MACAtB,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,4BACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,yGAIZzB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,MACAtB,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,2BACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,yGC6BTC,EA9CE,kBACb1B,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAWd,GAAG,YACVH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,CAAUlB,IAAI,qBACdJ,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,qBACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,6EAIZzB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,CAAUlB,IAAI,oBACdJ,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,qBACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,iFAKhBzB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,CAAUlB,IAAI,wBACdJ,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,qBACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,2FAIZzB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKC,GAAG,KACJpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACmB,EAAA,EAAKC,IAAN,CAAUlB,IAAI,0BACdJ,EAAAC,EAAAC,cAACmB,EAAA,EAAKE,KAAN,KACIvB,EAAAC,EAAAC,cAACmB,EAAA,EAAKG,MAAN,uBACAxB,EAAAC,EAAAC,cAACmB,EAAA,EAAKI,KAAN,qGCvBTE,EAVG,kBACd3B,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,KACI5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,QCdYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAAeC,SAASC,eAAe,SDgHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98af2eeb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = () => (\n    <div id=\"nav\">\n        <img src=\"/imgs/itch.svg\" alt=\"Our Itch.io\"/>\n        <img src=\"/imgs/twitter.svg\" alt=\"Our Twitter\" class=\"social\"/>\n    </div>\n);\n\nexport default Nav;\n","import React from 'react';\n\nconst Footer = () => (\n    <div id=\"footer\">\n        <a href = \"mailto: swartell@washington.edu\"><img src=\"/imgs/mail.svg\" alt=\"Our Email\"/></a>\n\n        <div id=\"freepik\">Icons made by \n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.freepik.com/\" title=\"Freepik\"> Freepik </a> from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a> is licensed by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" style={{ marginBottom: '20px' }}> CC 3.0 BY</a>\n        </div>\n    </div>\n);\n\nexport default Footer;\n","import React from 'react';\n\nconst CentralBlock = () => (\n    <div id=\"central\">\n    {/* TODO: We should add a background image of the game here */}\n        <h1>Turnip</h1>\n        <img src=\"/imgs/turnip.svg\" alt=\"turnip logo\" height=\"500px\"/>\n    </div>\n);\n\nexport default CentralBlock;\n","import React from 'react';\nimport { Card, Row, Col, Container } from 'react-bootstrap';\n\nconst FeatureBlock = () => (\n    <Container id=\"features\">\n        <Row>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img />\n                    <Card.Body>\n                        <Card.Title>What is PlayTurnip?</Card.Title >\n                        <Card.Text>PlayTurnip is a platforming video game with a focus on an intimate story about mental health.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img />\n                    <Card.Body>\n                        <Card.Title>What can I expect?</Card.Title >\n                        <Card.Text>You can expect a fun game narrating the story of our hero and their service animal Turnip.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    </Container>\n);\n\nexport default FeatureBlock;\n","import React from 'react';\nimport { Card, Container, Row, Col } from 'react-bootstrap';\n\nconst Profiles = () => (\n    <Container id=\"profiles\">\n        <h2>Who We Are</h2>\n        <Row>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img src=\"./imgs/arden.jpg\"/>\n                    <Card.Body>\n                        <Card.Title>Arden Weaver</Card.Title >\n                        <Card.Text>UX Designer who loves making accessible and beautiful interfaces.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img src=\"./imgs/kyle.jpg\"/>\n                    <Card.Body>\n                        <Card.Title>Kyle Simpson</Card.Title >\n                        <Card.Text>Jack of all trades techie who can and will fix any problem you have.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img src=\"./imgs/sean_pic.jpg\"/>\n                    <Card.Body>\n                        <Card.Title>Sean Meharry</Card.Title >\n                        <Card.Text>Full-Stack Software Engineer devoted to making enjoyable software for everyone.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n            <Col xs=\"6\">\n                <Card>\n                    <Card.Img src=\"./imgs/selene_pic.jpg\"/>\n                    <Card.Body>\n                        <Card.Title>Selene Wartell</Card.Title >\n                        <Card.Text>Front-End Software Engineer from the east side who loves making intriguing interfaces.</Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    </Container>\n);\n\nexport default Profiles;","import React from 'react';\nimport '../css/index.css';\nimport Nav from './Nav.jsx';\nimport Footer from './Footer.jsx';\nimport CentralBlock from './CentralBlock.jsx';\nimport FeatureBlock from './FeatureBlock.jsx';\nimport Profiles from './Profiles.jsx';\n\nconst Container = () => (\n    <React.Fragment>\n        <Nav/>\n        <CentralBlock/>\n        <FeatureBlock/>\n        <Profiles />\n        <Footer/>\n    </React.Fragment>\n);\n\nexport default Container;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Container from './components/Container.jsx';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<Container />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}